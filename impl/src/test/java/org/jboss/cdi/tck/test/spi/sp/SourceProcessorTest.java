package org.jboss.cdi.tck.test.spi.sp;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.testng.Arquillian;
import org.jboss.cdi.tck.AbstractTest;
import org.jboss.cdi.tck.api.Configuration;
import org.jboss.cdi.tck.impl.ConfigurationFactory;
import org.jboss.cdi.tck.impl.testng.SourceProcessorSuite;
import org.jboss.cdi.tck.shrinkwrap.JarArchiveBuilder;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import java.lang.reflect.Constructor;

/**
 * Test that a CDI-lite mode archive triggers the SourceProcessor and VersionProcessor annotation processor.
 * When run in a two pass scenario, this validates that the VersionSetter class generated by the
 * VersionProcessor can be loaded and that its static block has the side effect of updating the
 * SomeBean.VERSION field.
 */
public class SourceProcessorTest extends Arquillian {
    @Deployment
    public static JavaArchive createTestArchive() {
        System.setProperty("org.jboss.cdi.tck.test.spi.container.VersionProcessor.ran", "false");
        ConfigurationFactory.get().setCDILiteModeFlag(Boolean.TRUE);
        System.out.printf("SourceProcessorTest.createTestArchive()\n");
        JavaArchive jar = new JarArchiveBuilder()
                .debugMode()
                .withTestClassPackage(SourceProcessorTest.class)
                .build();
        return jar;
    }

    @Test
    public void testSrcProcRanOnJarArchive() throws Exception {
        System.out.printf("CodeSource: %s\n", getClass().getProtectionDomain().getCodeSource());
        String expectedVersion = "1.0";
        Configuration config = ConfigurationFactory.get();
        if(config.isSourceProcessorPassTwo()) {
            expectedVersion = "2.0";
        } else if(config.isSourceProcessorPassOne()) {
            // The VersionProcessor sets this flag if it runs successfully
            Boolean processorRan = Boolean.valueOf(System.getProperty("org.jboss.cdi.tck.test.spi.container.VersionProcessor.ran", "false"));
            Assert.assertTrue(processorRan, "VersionProcessor ran");
        }

        try {
            // Loading this class in pass two has the side effect of updating the SomeBean.VERSION setting
            Class<?> initClass = Class.forName("org.jboss.cdi.tck.test.spi.sp.VersionSetter");
            Object versionSetter = initClass.getConstructor().newInstance();
            System.out.printf("SourceProcessorTest#testSrcProcRanOnJarArchive, loaded VersionSetter: %s\n", versionSetter);
            expectedVersion = "2.0";
        } catch (Exception e) {
            // This generated class is not visible to the test framework in pass one
            System.out.printf("SourceProcessorTest#testSrcProcRanOnJarArchive, unable to load VersionSetter\n");
        }
        System.out.printf("SourceProcessorTest#testSrcProcRanOnJarArchive(%s)\n", SomeBean.VERSION);
        Assert.assertEquals(SomeBean.VERSION, expectedVersion);
    }
}
