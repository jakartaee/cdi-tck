<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ ]>
<chapter id="eclipse-running">
   <title>Running Tests in Eclipse</title>
   <para>
      This chapter explains how to run individual tests using the Eclipse
      TestNG plugin. It covers running non-integration tests in standalone mode
      and integration tests (as well as non-integration tests) in in-container
      mode. You should be able to use the lessons learned here to debug tests in
      an alternate IDE as well.
   </para>
   <section>
      <title>Leveraging Eclipse's plugin ecosystem</title>
      <para>
         Using an existing test harness (TestNG) allows the tests to be executed
         and debugged in an Integrated Development Environment (IDE) using
         available plugins. Using an IDE is also the easiest way to execute a
         test class in isolation.

      </para>
      <para>
         The TCK can be executed in any IDE for which there is a TestNG plugin
         available. Running a test from the CDI TCK test suite using the Eclipse
         TestNG plugin is almost as simple as running any other TestNG test. You
         can also use the plugin to debug a test, which is described in the next
         chapter.
      </para>
      <para>
         Before running a test from the TCK test suite in Eclipse, you must have
         the Eclipse <ulink url="http://testng.org">TestNG plugin</ulink> and
         either the m2e plugin or an Eclipse project generated using the
         Maven 2 Eclipse plugin (<literal>maven-eclipse-plugin</literal>). Refer
         to <xref linkend="eclipse-plugins" /> for more information on these
         plugins.
      </para>

      <note>
         <para>
           In order to run the TCK tests in Eclipse you must have CDI TCK and Weld JBoss TCK runner
           projects imported. Get the source from GitHub repositories
           <ulink url="https://github.com/jboss/cdi-tck">https://github.com/jboss/cdi-tck</ulink>
           and <ulink url="https://github.com/weld/core">https://github.com/weld/core</ulink>.
         </para>
      </note>

      <para>
         With the m2e plugin installed, Eclipse should recognize the
         CDI TCK projects as valid Eclipse projects (or any Weld project
         for that matter). Import them into the Eclipse workspace at this time.
         You should also import the Weld projects if you want to debug into
         that code, which is covered later.
      </para>
      <tip>
         <para>
            If you choose to use the Maven 2 Eclipse plugin
            (<literal>maven-eclipse-plugin</literal>), you should execute the
            plugin in both the tck and weld projects:
         </para>
         <programlisting><![CDATA[cd tck
mvn clean eclipse:clean eclipse:eclipse -DdownloadSources -DdownloadJavadocs
cd ../weld
mvn clean eclipse:clean eclipse:eclipse -DdownloadSources -DdownloadJavadocs]]></programlisting>
      </tip>
   </section>
   <section>
      <title>Readying the Eclipse workspace</title>
      <para>
         When setting up your Eclipse workspace, we recommended creating three
         workings sets:
      </para>
      <orderedlist>
         <listitem>
            <para>
               <emphasis role="bold">Weld</emphasis> - Groups the CDI API
               and the CDI RI (i.e., Weld) projects
            </para>
         </listitem>
         <listitem>
            <para>
               <emphasis role="bold">CDI TCK</emphasis> - Groups the CDI TCK
               API and the test suite projects
            </para>
         </listitem>
         <listitem>
            <para>
               <emphasis role="bold">Weld JBoss TCK Runner</emphasis> -
               Groups the porting package implementation and TCK runner projects
            </para>
         </listitem>
      </orderedlist>
      <para>
         The dependencies between the projects will either be established
         automatically by the m2e plugin, based on the dependency
         information in the pom.xml files, or as generated by the <literal>mvn
         eclipse:eclipse</literal> command.
      </para>
      <para>
         Your workspace should appear as follows:
      </para>
      <programlisting><![CDATA[Weld
  cdi-api
  weld-core
  ...
CDI TCK
  cdi-tck-api
  cdi-tck-impl
  cdi-tck-parent
Weld JBoss TCK Runner
  weld-jboss-runner-tck11
  weld-porting-package-tck11]]></programlisting>
      <para>
         The tests in the TCK test suite are located in the cdi-tck-impl
         project. You'll be working within this project in Eclipse when you are
         developing tests. However, as you learned earlier, there are no references
         to a CDI implementation in the TCK. So how can you execute an
         individual test in Eclipse? The secret is that you need to establish a
         link in Eclipse (not in Maven) between the cdi-tck-impl project and
         your TCK runner project, which in this case is
         weld-jboss-runner-tck11 (the project in the jboss-tck-runner/1.1
         directory).
      </para>
      <para>
         Here are the steps to establish the link:
      </para>
      <orderedlist>
         <listitem>
            <para>
               Right click on the cdi-tck-impl project
            </para>
         </listitem>
         <listitem>
            <para>
               Select Build Path &gt; Configure Build Path...
            </para>
         </listitem>
         <listitem>
            <para>
               Click on the Projects tab
            </para>
         </listitem>
         <listitem>
            <para>
               Click the Add... button on the right
            </para>
         </listitem>
         <listitem>
            <para>
               Check the TCK runner project (e.g., weld-jboss-runner-tck11)
            </para>
         </listitem>
         <listitem>
            <para>
               Click the OK button on the Required Project Selection dialog
               window
            </para>
         </listitem>
         <listitem>
            <para>
               Click the OK button on the Java Build Path window
            </para>
         </listitem>
      </orderedlist>
      <para>
         Of course, the weld-jboss-runner-tck11 also depends on the
         cdi-tck-impl at runtime (so it can actually find the tests to
         execute). But m2e plugin doesn't distinguish between build-time and
         runtime dependencies. As a result, we've created a circular dependency
         between the projects. In all likelihood, Eclipse will struggle (if not
         fail) to compile one or more projects. How can we break this cycle?
      </para>
      <para>
        As it turns out, the TCK runner doesn't need to access the tests to
        build. It only needs its classes, configurations and other dependencies
        at runtime (when the TestNG plugin executes). Therefore, we can disable
        <emphasis>Resolve dependencies from workspace projects</emphasis> setting
        on weld-jboss-runner-tck11 project:
      </para>
      <orderedlist>
         <listitem>
            <para>
               Right click on the weld-jboss-runner-tck11 project
            </para>
         </listitem>
         <listitem>
            <para>
               Select Maven
            </para>
         </listitem>
         <listitem>
            <para>
               Uncheck Resolve dependencies from workspace projects option
            </para>
         </listitem>
         <listitem>
            <para>
               Click the OK button on the Properties window
            </para>
         </listitem>
      </orderedlist>
      <para>
         As you have learned, the TCK determines how to behave
         based on the values of system properties or properties defined
         in META-INF/cdi-tck.properties classpath resources. In order to run the
         tests, you need to add a properties file to the classpath or define
         corresponding system properties.
      </para>
      <para>
         The CDI TCK project conveniently provides the properties file
         src/test/resources/META-INF/cdi-tck.properties that
         contains all of the necessary properties for testing in
         Eclipse. You have to tune the
         <literal>org.jboss.cdi.tck.libraryDirectory</literal> and
         <literal>org.jboss.cdi.tck.testDataSource</literal> properties to
         point to the relative location of the related projects and specify the name
         of test datasource. The properties
         should be defined as follows:
      </para>
      <itemizedlist>
         <listitem>
            <para>
               <literal>org.jboss.cdi.tck.libraryDirectory</literal>
               - the path to the target/dependency/lib directory in the TCK runner project
            </para>
         </listitem>
         <listitem>
            <para>
               <literal>org.jboss.cdi.tck.testDataSource</literal>
               - the JNDI name of the test datasource, e.g. WildFly 8:
               <programlisting>
                  org.jboss.cdi.tck.testDataSource=java:jboss/datasources/ExampleDS
               </programlisting>
            </para>
         </listitem>
      </itemizedlist>
      <para>
         You are now ready to execute an individual test class (or artifact).
         Let's start with a test artifact capable of running in standalone mode.
      </para>
   </section>
   <section id="eclipse-standalone">
      <title>Running a test in standalone mode</title>
      <para>
        Use <emphasis>weld-embedded</emphasis> Maven profile (active by default)
        in order to run a test in standalone mode.
      </para>
      <tip>
        <para>
            If using m2e Eclipse plugin, you can activate/deactivate the profile in Maven section of project properties.
        </para>
      </tip>
      <note>
        <para>
         Note that all TestNG tests that
         are not included in <emphasis>integration</emphasis> and <emphasis>javaee-full</emphasis>
         test groups are considered to be standalone artifacts.
        </para>
      </note>
      <para>
        Select a test class containing standalone tests and open it in the Eclipse editor.
        Now right click in the editor view and select Run As &gt; TestNG Test.
        The TestNG view should pop out and you should see all the tests in that
        artifact pass (if all goes well).
      </para>
      <note>
         <para>
            If the TCK complains that there is a property missing, close all
            the projects, open them again, and rebuild. The m2e plugin can
            be finicky getting everything built correctly the first time.
         </para>
      </note>
      <para>
         So far you have executed a test in standalone mode. That's not
         sufficient to pass the TCK. The test must be executed using
         in-container mode.
      </para>
      <para>
         Let's see what has to be done to execute an integration test. This
         will result in the artifact being deployed to the container, which is
         WildFly if you are using the JBoss TCK runner.
      </para>
   </section>
   <section id="eclipse-in-container">
      <title>Running integration tests</title>
      <para>
        In order to run a test in the container you must explicitly specify following active Maven profiles in JBoss TCK runner Eclipse project properties: <literal>incontainer,!weld-embedded</literal>.
      </para>
      <note>
        <para>
            Note that all TestNG tests that are included in <emphasis>integration</emphasis> and <emphasis>javaee-full</emphasis>
            test groups are considered to be integration tests and must be run in in-container mode.
            <emphasis>javaee-full</emphasis> TestNG test group contains tests that require full Java EE platform
            (EAR packaging, JAX-WS, EJB timers, etc.).
        </para>
      </note>
      <para>
         Select an integration test (a class that extends <literal>org.jboss.cdi.tck.AbstractTest</literal>
         and open it in your Eclipse editor. Right click in the editor view and select Run As &gt; TestNG Test.
      </para>
      <para>
         You have now mastered running the CDI TCK against Weld using
         both Maven and within Eclipse. Now you're likely interested in how to
         debug a test so that you can efficiently investigate test failures.
      </para>
   </section>
<!--
vim: ts=3:sw=3:tw=80:set expandtab
-->
</chapter>
