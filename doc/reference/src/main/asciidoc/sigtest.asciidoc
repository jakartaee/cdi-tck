[[sigtest]]

== Running the Signature Test

One of the requirements of an implementation passing the TCK is for it to pass the CDI signature test. This section describes how the signature file is generated and how to run it against your implementation. 


=== Obtaining the sigtest plugin

The sigtest plugin is availble from Maven Central using a dependency like:
[source, xml]
----
...
    <plugin>
    <groupId>jakarta.tck</groupId>
    <artifactId>sigtest-maven-plugin</artifactId>
    <version>2.2</version>
    </plugin>
----

The source for the sigtest plugin can be found here:
https://github.com/eclipse-ee4j/jakartaee-tck-tools/tree/master/tools/sigtest

=== Running the signature test
To run the signature test, use a pom file like that found in
https://github.com/jakartaee/cdi-tck/blob/master/impl/src/main/resources/sigtest-pom.xml and shown here:
[source, xml]
----
<?xml version="1.0"?>
<!-- Sample maven pom to verify signatures -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <!-- For access to staging repos, add -Pstaging -->
  <parent>
    <groupId>org.eclipse.ee4j</groupId>
    <artifactId>project</artifactId>
    <version>1.0.9</version>
  </parent>

  <groupId>jakarta.enterprise</groupId>
  <artifactId>cdi-tck-sigtest</artifactId>
  <version>4.1</version>
  <name>CDI TCK Signature Tests</name>
  <description>CDI TCK Signature test validation of CDI dependent API jars</description>
  <properties>
    <!-- Set the api jar artifact versions here -->
    <annotations.api.version>3.0.0-M1</annotations.api.version>
    <interceptors.api.version>2.2.0-M1</interceptors.api.version>
    <atinject.api.version>2.0.1</atinject.api.version>
    <el.api.version>5.0.1</el.api.version>
    <cdi.api.version>4.1.0.Beta1</cdi.api.version>
  </properties>

  <!-- Set the api jar artifact dependencies here -->
  <dependencies>
    <dependency>
      <groupId>jakarta.annotation</groupId>
      <artifactId>jakarta.annotation-api</artifactId>
      <version>${annotations.api.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.el</groupId>
      <artifactId>jakarta.el-api</artifactId>
      <version>${el.api.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.interceptor</groupId>
      <artifactId>jakarta.interceptor-api</artifactId>
      <version>${interceptors.api.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.inject</groupId>
      <artifactId>jakarta.inject-api</artifactId>
      <version>${atinject.api.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.enterprise</groupId>
      <artifactId>jakarta.enterprise.lang-model</artifactId>
      <version>${cdi.api.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.enterprise</groupId>
      <artifactId>jakarta.enterprise.cdi-api</artifactId>
      <version>${cdi.api.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <stripVersion>true</stripVersion>
              <overWriteReleases>true</overWriteReleases>
              <outputDirectory>target/classes</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>jakarta.tck</groupId>
        <artifactId>sigtest-maven-plugin</artifactId>
        <version>2.2</version>
        <executions>
          <execution>
            <id>sigtest</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <sigfile>cdi-api-jdk17.sig</sigfile>
          <packages>jakarta.decorator,jakarta.enterprise.**,jakarta.interceptor</packages>
          <classes>target/classes</classes>
          <report>cdi-sig-report.txt</report>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
----
Your version should specify the dependencies on these jars as used in your compatible implementation.

[source, console]
----
(base) starksm@Scotts-Mac-Studio impl % mvn -Djdk.major.version=21 -Dsignature process-resources
...
[INFO] --- sigtest:2.1:check (sigtest) @ cdi-tck-sigtest ---
[INFO] Packages: jakarta.decorator,jakarta.enterprise.**,jakarta.interceptor
Feb 16, 2024 11:42:25 PM com.sun.tdk.signaturetest.SignatureTest parseParameters
INFO: SignatureTest.args: [-FileName, /Users/starksm/Dev/Jakarta/rh-cdi-tck/impl/src/main/resources/cdi-api-jdk17.sig, -static, -b, -Mode, bin, -ApiVersion, 4.1, -PackageWithoutSubpackages, jakarta.decorator, -Package, jakarta.enterprise, -PackageWithoutSubpackages, jakarta.interceptor, -BootCP, -Classpath, /Users/starksm/Dev/Jakarta/rh-cdi-tck/impl/src/main/resources/target/classes:/Users/starksm/.m2/repository/jakarta/annotation/jakarta.annotation-api/3.0.0-M1/jakarta.annotation-api-3.0.0-M1.jar:/Users/starksm/.m2/repository/jakarta/el/jakarta.el-api/5.0.1/jakarta.el-api-5.0.1.jar:/Users/starksm/.m2/repository/jakarta/interceptor/jakarta.interceptor-api/2.2.0-M1/jakarta.interceptor-api-2.2.0-M1.jar:/Users/starksm/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/starksm/.m2/repository/jakarta/enterprise/jakarta.enterprise.lang-model/4.1.0.Beta1/jakarta.enterprise.lang-model-4.1.0.Beta1.jar:/Users/starksm/.m2/repository/jakarta/enterprise/jakarta.enterprise.cdi-api/4.1.0.Beta1/jakarta.enterprise.cdi-api-4.1.0.Beta1.jar]
[INFO] SignatureTest report
Base version: 4.1.0-SNAPSHOT
Tested version: 4.1
Check mode: bin [throws removed]
Constant checking: on

Warning: The return type java.lang.reflect.Member can't be resolved
Warning: The return type java.lang.reflect.Member can't be resolved
Warning: The return type java.lang.reflect.Member can't be resolved


[INFO] /Users/starksm/Dev/Jakarta/rh-cdi-tck/impl/src/main/resources/cdi-sig-report.txt: 0 failures in /Users/starksm/Dev/Jakarta/rh-cdi-tck/impl/src/main/resources/cdi-api-jdk17.sig
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.021 s
[INFO] Finished at: 2024-02-16T23:42:25-06:00
[INFO] ------------------------------------------------------------------------

----

You can ignore the following warnings:
+"The return type java.lang.reflect.Member can't be resolved"+

The important thing is that the mvn version shows "BUILD SUCCESS".

Another example that just specifies a compatible implementation test as the dependency to validate the API artifact signatures from the transitive dependencies is pom file like that found in the cdi dist artifacts/sigtest-weld.xml and shown here:
[source, xml]
----
<?xml version="1.0"?>
<!-- Sample maven pom to verify signatures using only the weld-core-imp artifiact and its dependencies -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <!-- For access to staging repos, add -Pstaging -->
  <parent>
    <groupId>org.eclipse.ee4j</groupId>
    <artifactId>project</artifactId>
    <version>1.0.9</version>
  </parent>

  <groupId>jakarta.enterprise</groupId>
  <artifactId>cdi-tck-weld-sigtest</artifactId>
  <version>4.0</version>
  <name>CDI TCK Signature Tests</name>
  <description>CDI TCK Signature test validation of CDI dependent API jars</description>
  <properties>
    <!-- Set the Weld version to test -->
    <weld.version>6.0.0.Beta1</weld.version>
  </properties>

  <!-- Set the api jar artifact dependencies here -->
  <dependencies>
    <dependency>
      <groupId>org.jboss.weld</groupId>
      <artifactId>weld-core-impl</artifactId>
      <version>${weld.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>target/classes</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>jakarta.tck</groupId>
        <artifactId>sigtest-maven-plugin</artifactId>
        <version>2.1</version>
        <executions>
          <execution>
            <id>sigtest</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <sigfile>cdi-api-jdk17.sig</sigfile>
          <packages>jakarta.decorator,jakarta.enterprise.**,jakarta.interceptor</packages>
          <classes>target/classes</classes>
          <report>cdi-sig-report.xml</report>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
----
To verify the signatures of the Weld version specified in the artifacts/sigtest-weld-pom.xml, run:

```
% mvn -f artifacts/sigtest-weld-pom.xml verify
...
[INFO] /Users/starksm/Dev/Jakarta/rh-cdi-tck/dist-build/target/cdi-tck-4.1.0-SNAPSHOT/artifacts/cdi-sig-report.xml: 0 failures in /Users/starksm/Dev/Jakarta/rh-cdi-tck/dist-build/target/cdi-tck-4.1.0-SNAPSHOT/artifacts/cdi-tck-core-impl-4.1.0-SNAPSHOT-sigtest-jdk17.sig
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
```

=== CDI Lite Signature Tests
CDI Lite requires the same signature tests as Full. Even though CDI Lite does not require some of the Jakarta Interceptors behaviors, we did not want to restrict what CDI Lite implementations might provide in the way of interceptors, for example, an implementation that supports both Lite and Full. An implementation of CDI Lite can simply depend on the Jakarta Interceptors API artifact to meet the signature test requirements.

=== Forcing a signature test failure

Just for fun (and to confirm that the signature test is working correctly), you can try the following:

1) Edit cdi-api-jdk11.sig

2) Modify one of the class signatures - in the following example we change one of the constructors for +BusyConversationException+ - here's the original:

[source, console]
----
CLSS public jakarta.enterprise.context.BusyConversationException
cons public BusyConversationException()
cons public BusyConversationException(java.lang.String)
cons public BusyConversationException(java.lang.String,java.lang.Throwable)
cons public BusyConversationException(java.lang.Throwable)
supr jakarta.enterprise.context.ContextException
hfds serialVersionUID

----

Let's change the default (empty) constructor parameter to one with a +java.lang.Integer+ parameter instead:

[source, console]
----
CLSS public jakarta.enterprise.context.BusyConversationException
cons public BusyConversationException(java.lang.Integer)
cons public BusyConversationException(java.lang.String)
cons public BusyConversationException(java.lang.String,java.lang.Throwable)
cons public BusyConversationException(java.lang.Throwable)
supr jakarta.enterprise.context.ContextException
hfds serialVersionUID

----

3) Now when we run the signature test using the above command, we should get the following errors:


[source, console]
....
Missing Constructors
--------------------

jakarta.enterprise.context.BusyConversationException:         constructor public jakarta.enterprise.context.BusyConversationException.BusyConversationException(java.lang.Integer)

Added Constructors
------------------

jakarta.enterprise.context.BusyConversationException:         constructor public jakarta.enterprise.context.BusyConversationException.BusyConversationException()


STATUS:Failed.2 errors
....

